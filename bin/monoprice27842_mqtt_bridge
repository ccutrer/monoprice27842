#!/usr/bin/env ruby

require 'monoprice27842'
require 'mqtt'

class MQTTBridge
  def initialize(mqtt_uri, matrix, device_id: "monoprice27842", base_topic: "homie")
    @base_topic = "#{base_topic}/#{device_id}"
    @mqtt = MQTT::Client.new(mqtt_uri)
    @mqtt.set_will("#{@base_topic}/$state", "lost", true)
    @mqtt.connect
    @matrix = matrix
    matrix.item_updated_proc = method(:item_updated)
    @attributes = {}

    publish_basic_attributes

    Thread.new do
      # keep reading initial status until there's a bit of a lag
      matrix.read_messages(wait: false)
      loop do
        break if matrix.wait_readable(0.1).nil?
        matrix.read_messages
      end
      # then say we're ready
      publish("$state", "ready")

      loop do
        matrix.read_messages
      end
    end

    @mqtt.get do |topic, value|
      topic = topic[(@base_topic.length + 1)..-1]
      puts "got #{value.inspect} at #{topic}"

      if topic =~ %r{^matrix/(power|hdbt-poc|front-panel-lock|ip|ir-follow-video)/set$}
        if $1 == 'ip'
          next unless value =~ /^(?:\d{1,3}\.){3}\d{1,3}$/
          @matrix.ip = value
        else
          next unless %w{true false}.include?(value)
          matrix.send(:"#{$1.gsub('-', '_')}=", value == 'true')
        end
      elsif topic =~ %r{^(hdbt|hdmi)-output([1-8])/(power|hdcp)/set$}
        output = ($1 == 'hdbt' ? @matrix.hdbt_outputs : @matrix.hdmi_outputs)[$2.to_i - 1]
        if $3 == 'power'
          next unless %w{true false}.include?(value)
          output.power = value == 'true'
        else # if $3 == 'hdcp'
          next unless %w{match-display passive bypass}.include?(value)
          output.hdcp = value.sub('-', '_').to_sym
        end
      elsif topic =~ %r{^hdbt-output([1-8])/(input|downscale|rs232-remote-control-mcu|ir-remote-control-mcc)/set$}
        output = @matrix.hdbt_outputs[$1.to_i - 1]
        if $2 == 'input'
          next unless value =~ /^[1-8]$/
          output.input = value.to_i
        else
          next unless %w{true false}.include?(value)
          output.send(:"#{$2.gsub('-', '_')}=", value == 'true')
        end
      elsif topic =~ %r{^analog-output([1-8])/(input|mute|volume)/set$}
        output = @matrix.analog_outputs[$1.to_i - 1]
        if $2 == 'input'
          next unless value =~ /^(?:in|out)[1-8]$/
          output.input = value.to_sym
        elsif $2 == 'mute'
          next unless %w{true false}.include?(value)
          output.mute = value == 'true'
        else
          next unless value =~ /^\d{1,3}$/ && value.to_i <= 100
          output.volume = value.to_i
        end
      elsif topic =~ %r{^spdif-output([1-8])/input/set$}
        output = @matrix.spdif_outputs[$1.to_i - 1]
        next unless value =~ /^(?:in|out|arc)[1-8]$/
        output.input = value.to_sym
      elsif topic =~ %r{^ir-output([1-8])/ir-input/set$}
        output = @matrix.ir_outputs[$1.to_i - 1]
        next unless value =~ /^[1-8]$/
        output.ir_input = value.to_i
      end
    end
  end

  def publish(topic, value)
    @mqtt.publish("#{@base_topic}/#{topic}", value, true, 1)
  end

  def publish_attribute(attr, value)
    return if value.nil?
    if @attributes[attr] != value
      publish(attr, value.to_s.sub('_', '-'))
      @attributes[attr] = value
    end
  end

  def subscribe(topic)
    @mqtt.subscribe("#{@base_topic}/#{topic}")
  end

  def publish_basic_attributes
    publish("$homie", "v4.0.0")
    publish("$name", "Monoprice 27842 HDMI Matrix")
    publish("$state", "init")
    publish("$nodes", (
      ["matrix"] +
      @matrix.inputs.map { |i| "input#{i.id}" } +
      @matrix.hdbt_outputs.map { |i| "hdbt-output#{i.id}" } +
      @matrix.hdmi_outputs.map { |i| "hdmi-output#{i.id}" } +
      @matrix.analog_outputs.map { |i| "analog-output#{i.id}" } +
      @matrix.spdif_outputs.map { |i| "spdif-output#{i.id}" } +
      @matrix.ir_outputs.map { |i| "ir-output#{i.id}" }
    ).join(","))

    publish("matrix/$name", @matrix.name)
    publish("matrix/$type", @matrix.type)
    publish("matrix/$version", @matrix.version)
    publish("matrix/$properties", "power,hdbt-poc,front-panel-lock,ip,ir-follow-video")

    publish("matrix/power/$name", "System Power")
    publish("matrix/power/$datatype", "boolean")
    publish("matrix/power/$settable", "true")
    subscribe("matrix/power/set")

    publish("matrix/hdbt-poc/$name", "HDBT Outputs Power-Over-Cable Enabled")
    publish("matrix/hdbt-poc/$datatype", "boolean")
    publish("matrix/hdbt-poc/$settable", "true")
    subscribe("matrix/hdbt-poc/set")

    publish("matrix/front-panel-lock/$name", "Front Panel Buttons Locked")
    publish("matrix/front-panel-lock/$datatype", "boolean")
    publish("matrix/front-panel-lock/$settable", "true")
    subscribe("matrix/front-panel-lock/set")

    publish("matrix/ip/$name", "IP")
    publish("matrix/ip/$datatype", "string")
    publish("matrix/ip/$settable", "true")
    subscribe("matrix/ip/set")

    publish("matrix/ir-follow-video/$name", "IR Switching Follows Video Switching")
    publish("matrix/ir-follow-video/$datatype", "boolean")
    publish("matrix/ir-follow-video/$settable", "true")
    subscribe("matrix/ir-follow-video/set")

    @matrix.inputs.each do |i|
      publish("input#{i.id}/$name", "HDMI Input #{i.id}")
      publish("input#{i.id}/$type", "HDMI Input")
      publish("input#{i.id}/$properties", "link,edid")

      publish("input#{i.id}/link/$name", "Link Status")
      publish("input#{i.id}/link/$datatype", "boolean")

      publish("input#{i.id}/edid/$name", "EDID")
      publish("input#{i.id}/edid/$datatype", "string")
      publish("input#{i.id}/edid/$settable", "true")
      subscribe("input#{i.id}/edid/set")
    end

    @matrix.hdbt_outputs.each do |o|
      publish("hdbt-output#{o.id}/$name", "HDBT Output #{o.id}")
      publish("hdbt-output#{o.id}/$type", "HDBT Output")
      publish("hdbt-output#{o.id}/$properties", "power,link,hdcp,input,downscale,rs232-remote-control-mcu,ir-remote-control-mcu")

      publish("hdbt-output#{o.id}/input/$name", "Input")
      publish("hdbt-output#{o.id}/input/$datatype", "integer")
      publish("hdbt-output#{o.id}/input/$format", "1:8")
      publish("hdbt-output#{o.id}/input/$settable", "true")
      subscribe("hdbt-output#{o.id}/input/set")

      publish("hdbt-output#{o.id}/downscale/$name", "Automatic Video Resolution Downscaling")
      publish("hdbt-output#{o.id}/downscale/$datatype", "boolean")
      publish("hdbt-output#{o.id}/downscale/$settable", "true")
      subscribe("hdbt-output#{o.id}/downscale/set")

      publish("hdbt-output#{o.id}/rs232-remote-control-mcu/$name", "Matrix can be controlled via RS-232 device")
      publish("hdbt-output#{o.id}/rs232-remote-control-mcu/$datatype", "boolean")
      publish("hdbt-output#{o.id}/rs232-remote-control-mcu/$settable", "true")
      subscribe("hdbt-output#{o.id}/rs232-remote-control-mcu/set")

      publish("hdbt-output#{o.id}/ir-remote-control-mcu/$name", "Matrix can be controlled via IR")
      publish("hdbt-output#{o.id}/ir-remote-control-mcu/$datatype", "boolean")
      publish("hdbt-output#{o.id}/ir-remote-control-mcu/$settable", "true")
      subscribe("hdbt-output#{o.id}/ir-remote-control-mcu/set")
    end

    @matrix.hdmi_outputs.each do |o|
      publish("hdmi-output#{o.id}/$name", "HDMI Output #{o.id}")
      publish("hdmi-output#{o.id}/$type", "HDMI Output")
      publish("hdmi-output#{o.id}/$properties", "power,link,hdcp")
    end

    (@matrix.hdbt_outputs + @matrix.hdmi_outputs).each do |o|
      prefix = o.is_a?(Monoprice27842::HDBTOutput) ? "hdbt-output" : "hdmi-output"

      publish("#{prefix}#{o.id}/power/$name", "Output On")
      publish("#{prefix}#{o.id}/power/$datatype", "boolean")
      publish("#{prefix}#{o.id}/power/$settable", "true")
      subscribe("#{prefix}#{o.id}/power/set")

      publish("#{prefix}#{o.id}/link/$name", "Link Status")
      publish("#{prefix}#{o.id}/link/$datatype", "boolean")

      publish("#{prefix}#{o.id}/hdcp/$name", "HDCP Mode")
      publish("#{prefix}#{o.id}/hdcp/$datatype", "enum")
      publish("#{prefix}#{o.id}/hdcp/$settable", "match-display,passive,bypass")
      subscribe("#{prefix}#{o.id}/hdcp/set")
    end

    @matrix.analog_outputs.each do |o|
      publish("analog-output#{o.id}/$name", "Analog Audio Output #{o.id}")
      publish("analog-output#{o.id}/$type", "Analog Audio Output")
      publish("analog-output#{o.id}/$properties", "input,mute,volume")

      publish("analog-output#{o.id}/input/$name", "Input")
      publish("analog-output#{o.id}/input/$datatype", "enum")
      publish("analog-output#{o.id}/input/$format", "in1,in2,in3,in4,in5,in6,in7,in8,out1,out2,out3,out4,out5,out6,out7,out8")
      publish("analog-output#{o.id}/input/$settable", "true")
      subscribe("analog-output#{o.id}/input/set")

      publish("analog-output#{o.id}/mute/$name", "Mute")
      publish("analog-output#{o.id}/mute/$datatype", "boolean")
      publish("analog-output#{o.id}/mute/$settable", "true")
      subscribe("analog-output#{o.id}/mute/set")

      publish("analog-output#{o.id}/volume/$name", "Volume")
      publish("analog-output#{o.id}/volume/$datatype", "integer")
      publish("analog-output#{o.id}/volume/$format", "0:100")
      publish("analog-output#{o.id}/volume/$unit", "%")
      publish("analog-output#{o.id}/volume/$settable", "true")
      subscribe("analog-output#{o.id}/volume/set")
    end

    @matrix.spdif_outputs.each do |o|
      publish("spdif-output#{o.id}/$name", "SPDIF Audio Output #{o.id}")
      publish("spdif-output#{o.id}/$type", "SPDIF Audio Output")
      publish("spdif-output#{o.id}/$properties", "input")

      publish("spdif-output#{o.id}/input/$name", "Input")
      publish("spdif-output#{o.id}/input/$datatype", "enum")
      publish("spdif-output#{o.id}/input/$format", "in1,in2,in3,in4,in5,in6,in7,in8,out1,out2,out3,out4,out5,out6,out7,out8,arc1,arc2,arc3,arc4,arc5,arc6,arc7,arc8")
      publish("spdif-output#{o.id}/input/$settable", "true")
      subscribe("spdif-output#{o.id}/input/set")
    end

    @matrix.ir_outputs.each do |o|
      publish("ir-output#{o.id}/$name", "IR Output #{o.id}")
      publish("ir-output#{o.id}/$type", "IR Output")
      publish("ir-output#{o.id}/$properties", "ir-input")

      publish("ir-output#{o.id}/ir-input/$name", "IR Input (from remote HDBT)")
      publish("ir-output#{o.id}/ir-input/$datatype", "integer")
      publish("ir-output#{o.id}/ir-input/$format", "1:8")
      publish("ir-output#{o.id}/ir-input/$settable", "true")
      subscribe("ir-output#{o.id}/ir-input/set")
    end
  end

  def item_updated(object, property)
    node = case object
    when Monoprice27842::Matrix; "matrix"
    when Monoprice27842::Input; "input#{object.id}"
    when Monoprice27842::HDBTOutput; "hdbt-output#{object.id}"
    when Monoprice27842::HDMIOutput; "hdmi-output#{object.id}"
    when Monoprice27842::AnalogOutput; "analog-output#{object.id}"
    when Monoprice27842::SPDIFOutput; "spdif-output#{object.id}"
    when Monoprice27842::IROutput; "ir-output#{object.id}"
    when Monoprice27842::Preset; "preset#{object.id}"
    end

    if object.is_a?(Monoprice27842::Preset)
      key = "#{node}/output#{property + 1}"
      value = object[property]
    else
      key = "#{node}/#{property.to_s.gsub('_', '-')}"
      value = object.send(property)
    end
    publish_attribute(key, value)
  end
end

mqtt_uri = ARGV.shift
matrix_uri = ARGV.shift
device_id = ARGV.shift

matrix = Monoprice27842::Matrix.new(matrix_uri)

MQTTBridge.new(mqtt_uri, matrix, device_id: device_id || "monoprice27842")
